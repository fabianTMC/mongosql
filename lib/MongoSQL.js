// Generated by CoffeeScript 1.4.0
var MongoSQL, multiplyString;

multiplyString = function(str, num, sep) {
  var retval;
  if (num == null) {
    throw 'num is required';
  }
  sep = sep || '';
  retval = [];
  while (num-- > 0) {
    retval.push(str);
  }
  return retval.join(sep);
};

module.exports = MongoSQL = (function() {

  function MongoSQL() {}

  MongoSQL.prototype.parse = function(query) {
    var idx, key, keys, op, ops, phs, source, val, vals, value;
    keys = [];
    ops = [];
    phs = [];
    vals = [];
    for (key in query) {
      value = query[key];
      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value instanceof Date) {
        keys.push(key);
        ops.push('=');
        phs.push('?');
        vals.push(value);
      } else if (value instanceof Array) {
        keys.push(key);
        ops.push('IN');
        phs.push("(" + (multiplyString('?', value.length, ',')) + ")");
        vals = vals.concat(value);
      } else if (value instanceof RegExp) {
        source = value.source;
        if (!source.match(/^\^/)) {
          source = '%' + source;
        } else {
          source = source.replace(/^\^/, '');
        }
        if (!source.match(/\$$/)) {
          source = source + '%';
        } else {
          source = source.replace(/\$$/, '');
        }
        keys.push(key);
        ops.push('LIKE');
        phs.push('?');
        vals.push(source);
      } else {
        for (op in value) {
          val = value[op];
          keys.push(key);
          ops.push(op);
          phs.push('?');
          vals.push(val);
        }
      }
    }
    return {
      where: ((function() {
        var _i, _len, _results;
        _results = [];
        for (idx = _i = 0, _len = keys.length; _i < _len; idx = ++_i) {
          key = keys[idx];
          _results.push("" + keys[idx] + " " + ops[idx] + " " + phs[idx]);
        }
        return _results;
      })()).join(' AND '),
      value: vals
    };
  };

  return MongoSQL;

})();
